import { AlbumWithDetail } from "./types/albumWithDetail";
import { AllSongsSong } from "./types/allSongsSong";
import { AllStationsInfo } from "./types/allStationsInfo";
import { AlreadyVoted } from "./types/alreadyVoted";
import { ApiInfo } from "./types/apiInfo";
import { ArtistWithSongs } from "./types/artistWithSongs";
import { BooleanResult } from "./types/booleanResult";
import { RainwaveErrorObject } from "./types/rainwaveErrorObject";
import { RainwaveSDKErrorClear } from "./types/sdkErrorClear";
import { FaveAlbumResult } from "./types/faveAlbumResult";
import { FaveAllSongsResult } from "./types/faveAllSongsResult";
import { FaveSong } from "./types/faveSong";
import { FaveSongResult } from "./types/faveSongResult";
import { GroupWithDetail } from "./types/groupWithDetail";
import { Listener } from "./types/listener";
import { LiveVoting } from "./types/liveVoting";
import { MessageId } from "./types/messageId";
import { Ping } from "./types/ping";
import { PlaybackHistory } from "./types/playbackHistory";
import { Pong } from "./types/pong";
import { PongConfirm } from "./types/pongConfirm";
import { RainwaveEvent } from "./types/rainwaveEvent";
import { RateResult } from "./types/rateResult";
import { RedownloadM3u } from "./types/redownloadM3u";
import { Relays } from "./types/relays";
import { RequestLine } from "./types/requestLine";
import { Requests } from "./types/requests";
import { SearchResult } from "./types/searchResults";
import { SongWithDetail } from "./types/songWithDetail";
import { Station } from "./types/station";
import { Stations } from "./types/stations";
import { StationSongCount } from "./types/stationSongCount";
import { Top100 } from "./types/top100";
import { UnratedSongs } from "./types/unratedSongs";
import { User } from "./types/user";
import { UserRecentVotes } from "./types/userRecentVotes";
import { VoteResult } from "./types/voteResult";
import {
  AlbumDiff,
  AllAlbumsPaginated,
  AllArtistsPaginated,
  AllGroupsPaginated,
} from "./types";

export interface RainwaveResponseTypes {
  album: AlbumWithDetail;
  album_diff: AlbumDiff;
  albums: SearchResult["albums"];
  all_albums_paginated: AllAlbumsPaginated;
  all_artists_paginated: AllArtistsPaginated;
  all_faves: FaveSong[];
  all_groups_paginated: AllGroupsPaginated;
  all_songs: AllSongsSong[];
  all_stations_info: AllStationsInfo;
  already_voted: AlreadyVoted;
  api_info: ApiInfo;
  artists: SearchResult["artists"];
  artist: ArtistWithSongs;
  build_version: number;
  cookie_domain: string;
  delete_request_result: BooleanResult;
  error_report_result: BooleanResult;
  error: RainwaveErrorObject;
  fave_album_result: FaveAlbumResult;
  fave_all_songs_result: FaveAllSongsResult;
  fave_song_result: FaveSongResult;
  group: GroupWithDetail;
  listener: Listener;
  live_voting: LiveVoting;
  locale: string;
  locales: Record<string, string>;
  message_id: MessageId;
  mobile: boolean;
  on_draw: unknown[];
  on_init: unknown[];
  on_measure: unknown[];
  order_requests_result: BooleanResult;
  pause_request_queue_result: BooleanResult;
  ping: Ping;
  pong: Pong;
  pongConfirm: PongConfirm;
  playback_history: PlaybackHistory;
  rate_result: RateResult;
  redownload_m3u: RedownloadM3u;
  relays: Relays;
  request_favorited_songs_result: BooleanResult;
  request_line: RequestLine;
  request_result: BooleanResult;
  request_unrated_songs_result: BooleanResult;
  requests: Requests;
  sched_current: RainwaveEvent;
  sched_history: RainwaveEvent[];
  sched_next: RainwaveEvent[];
  sdk_exception: Error;
  sdk_error_clear: RainwaveSDKErrorClear;
  sdk_schedule_synced: true;
  song: SongWithDetail;
  songs: SearchResult["songs"];
  station_list: Record<Station, { id: number; url: string }>;
  station_song_count: StationSongCount;
  stations: Stations;
  stream_filename: string;
  sync_result: RainwaveErrorObject;
  top_100: Top100;
  unpause_request_queue_result: BooleanResult;
  unrated_songs: UnratedSongs;
  user_info: User;
  user_recent_votes: UserRecentVotes;
  user_requested_history: UserRecentVotes;
  user: User;
  vote_result: VoteResult;
  websocket_host: string;
  wsok: true;
  wsthrottle: { tl_key: string; text: string };
  wserror: RainwaveErrorObject;
}
